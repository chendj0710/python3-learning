1.可见性
  python中并没有显示的public、private和protect，默认全部都是公有的public

  只是以__开头的话，会使用命令倾轧，在类外访问时，无法直接访问原成员变量

2.类
  1)命名
    python中，首字母大写的名称指的是类

  2)__init__()  函数
    类似于构造函数，创建类的时候自动调用

  3)属性
    python是动态语言，可以在运行过程中增加属性和方法。在__init__()中只是定义了部分初始属性
	
3.类的一些特殊函数
    C.__init__(self[, arg1, ...])      构造函数   实际是初始化类变量
	C.__new__(arg1, ...])       	   构造函数   真正的构造，如果一个类中同时覆写__init__和__new__，将先执行__new__,再调用__init__
	
	C.__del__(self)                    析构函数
	
	C.__call__(self, *args)            表示可调用的实例。表示实例名可以当成函数名
	                                   eg: c1 = class_name()  (内部已覆写__call__), 
									       c1()     => 调用c1.__call__()函数


二、继承
1.格式
  clase Subclass_name(Superclass_name):
    def __init__(self, ...)
        super().__init__(...)      #显示调用父类的构造，此处不用传self
								   #也可以显示调用父类的构造，Superclass_name.__init__(self)
		...
		

		
三、重写
   1.条件
    子类和父类的函数名相同即可
  

四、导入类
   1.导入单个类
     from module_name  import class_name
	 
	访问类是，直接使用类名即可
	 
   2.导入过个类
     from module_name  import class_name1, class_name2
	 
	 访问类是，直接使用类名即可
	 
   3.导入整个模块
     import module_name
	 
	 访问：module_name.class_name
	 
	 好处：1)导入多个类，但是不会产生命名冲突
	       2)可以知道有哪些地方使用了导入类
	 
   4.导入模块中的所有类      不推荐使用
     rom module_name  import *
	 
	 不推荐的原因：
		1)不明确到底导入了哪些
		2)导入所有容易和本文件命名冲突
		
注：
	python中并没有所谓的头文件的概念。现在有A，B, C三个模块，
	则如果B依赖A， C依赖A, B.即使在B中已经import A, 在C中仍然要显示import A， import B
	 

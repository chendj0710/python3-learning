注意：
    python区分大小写

注释
  python是通过#来注释
	
一、基础数据类型    
1.数据类型
  整数
  浮点数
  字符串， ‘hello  world’  ”hello world"     +号用来拼接字符串, 
											字符串 + 数字        字符串  + str(num)
  布尔值   True  False						(True <==> 1, False <=> 0)
  空值     None，并非0						可以用来判断一个对象是否为空。即创建了，但没有赋值
											其次，None可以赋值给任何类型。比如，函数定义是，可以将某个参数缺省值设置为None，表缺省为空
  
  eg:
    lists = []
	if lists is None:
		print("lists is null")				=>将会执行这条语句
    
  
  
2.变量
  变量可以反复赋值，而且可以数据类型不同。如：
  a = 100
  a = 'ABC'
  
  
3.常量
  python中没有任何机制保证常量不被改变，只是习惯性认为全部大小的变量名就是常量
  
  PI = 3.1415926
  
  
 4.特殊运算
    10/3            3.33333333
    10//3           3               地板除，对结果取余
    

二、内置其他数据类型
1.list      可变的集合	
  表示方式：  classlist = ['zhangsan', 'lisi','wanger']              同类型数据
              classlist = ['wangwu', 1]                              不同类型数据
              classlist = ['zhangsan', ['wangwu', 1], 'lisi']        嵌套
  动作： 
              a.使用下标访问：
                    classlist[1], classlist[2,1]
                    
                    classlist[-n]                        倒数第n个元素
              b.插入
                    classlist.append(values)             插入尾
                    classlist.insert(i, values)          插入指定位置， i后的所有元素均右移一位
              c.删除
                    classlist.pop()                      删除尾         返回删除的元素           
                    classlist.pop(i)                     删除指定位置   返回删除的元素 
					
					del classlist[i]					 删除指定位置，无返回值
					
					classlist.remove(value)				 按值删除      只删除第一个匹配的元素， 无返回
                    
              d.获取元素个数
                    classlist.len()
              e.赋值
                    classlist[1] = values
					
			  f.遍历									注意for循环后面的冒号:
					for item in list_items:
						print(item)		
					
	排序：	
			 a.sort  修改list本身的值
					classlist.sort()				   增序
					classlist.sort(reverse=True)       逆序排列
					
			 b.sorted 并不修改classlist本身的值
					sorted(classlist)                  返回增序的list
					sorted(classlist, reverse=True) 
					
			 c.reverse  修改classlist本身值，但是可逆
			        claslist.reverse()
					
	创建数字列表 range
			a.生成方法
				--range							 返回的并非一个列表，需要使用list才行
				    range(num)                   返回num个数，[0, num)
					range(start, end)            返回[start, end)之间的所有数，默认步长是1
					range(start, end, step)		 指定步长的数字集合
					
					list(range(...))			 将range返回的结果转换成列表
				
				--列表解析
					listname = [list_item_exrp  for sub ]
					
					等价于
					for sub
						listname.append(list_item_exrp)
				eg:
					squares = [value**2 for value in range(1, 6) ]	 生成1-5之间数的平方集合
					print(squares)
					
				  列表推导式的结构是由一对方括号所包含的以下内容：
						一个表达式，后面跟一个 for 子句，然后是零个或多个 for 或 if 子句。 
						其结果将是一个新列表，由对表达式依据后面的 for 和 if 子句的内容进行求值计算而得出
						
				        
				  eg：
					>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
						[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
						
				   等价于：
					>>> combs = []
					>>> for x in [1,2,3]:
					...     for y in [3,1,4]:
					...         if x != y:
					...             combs.append((x, y))

					注意：前面的表达式不一定要用后面的for语句中的变量，如：
						loops = (randrange(2,5) for x in xrange(randrange(3,7)))
						
						等价于：
							for x in range(randrange(3,7))：
								loops = randrange(2,5)
							
						含义：随机生成3~6个数，添加到loops中，每个值的范围时2~4
						
						注：python3中xrange不能再使用了，被重名成range
					
			b.常见函数
				min, max, sum
				
	使用列表的部分(切片)
			格式：  list2 = list1[start:end]    则list2就是取列表1中从[start,end)的元素创建的新list(新申请了内存)
			
			其中：
				start和end均可选，list[:end]   表示返回从[0,end)的切片
								  list[start:] 表示返回从[start,len(list))的切片
								  list[:]	   返回整个list的副本
								  
		    特别的，list2 = list1, 则list2只是原list1的一个引用，两者指向同一个内存。
					但list2=list1[:], 则list2是list1的一个副本， 两者指向的内存不同
					
					
	

			
			
2.tuple     不可变的list， 用于存储整个生命周期不变的一组值   
    特点：    元素一旦确定，则不可改变;但元组变量可以指向新的元组
    表示方式： classtuple = ('Michael', 'Bob', 'Tracy')
    动作： 
            a.下标访问
	遍历：	
			for item int tuple
				print item
            
    特别地，如何只定义一个只有一个元素的tuple,则需使用逗号,如classtuple = (1,)，如果写成classtuple = (1)，则会认为是整数1
	
eg:
	tuple1 = (1,2)
	tuple1[0] = 10      不合法
	tuple1 = (10, 20)    合法
  
  
3.dic     相当于map    键值对key-values
   表示方式：d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
             d['Michael']
             
             其中key必须是不可变的，因为内部存储时是用key做hash来计算value的存储位置的
             经常会使用str, 数字作为key
             
    动作：
            访问：dict[key]
            添加/修改：dict[key] = value       如果key和之前的重复，则覆盖之前的value   
            删除: dict.pop(key)
				  del dict[key]
	
	遍历:
			遍历键值对：for key, value in dict.items():
			遍历所有键: for key in dict.keys():      	#keys()返回的是一个列表     
			            for key in dict:        		#简写， dict默认遍历所有节点，一般不建议
						
			遍历所有值: for vaule in dict.values()    
			            for vaule in set(dict.values()):  #去重
						
			特别地，遍历字典时，返回的顺序是无法预测的，如果需按顺序返回，可使用sorted()
						
			
            
4.set     无序集合
   表示方法：d = set([1,2,3])         =>当set()传入一个list时，则会将其转换成一个set.注意此处必须是[value1, value2, ..]
             d = {1,2,3}      
			 
   创建空集合：
			d = set()       #注意不能使用{},它是用来创建空字典的
			
   动作：
        添加： d.add(key)
        删除： d.remove(key)
        
        支持类似于数学集合一样的操作：
            a-b  a&b  a|b
			
	集合推导式：
		>>> a = {x for x in 'abracadabra' if x not in 'abc'}
		>>> a
		{'r', 'd'}

   set只存储key,并不存储value,使用set初始化时，必须使用不可变参数初始化，不能使用list等可变参数，如：
   d.set(1,[2,3])   ×   
   
   
     
    

三、条件判断       注意冒号和elif
    if age >= 18:
        print('adult')
    elif age >= 6:
        print('teenager')
    else:
        print('kid')
		

1.条件测试  运算符
	字符串运算符    
		==	字符串判等
	    !=  字符串判不等
			  
	关系运算符
		和c语言一样
		
	逻辑运算符
		and,  or, not(非)
		
	列表的包含和不包含
	    in, not in

2.if 和列表

   if lists :   #如果lists为空，则返回False
	   sub
	
	

	
        
四、循环
   1.for x  in list/tupe/range
       for x  in  [1,2,3,4,5]:
         sum = sum + x
       
       for x  in  range(5):
         sum = sum + x
   注：其中range返回一个0-n的序列（不包含n)
   
   
   for i in range(10):
	  ...
	
	通过range即可控制文件的次数
   
   for循环不应该修改列表。
   因为如果在for循环中删除元素时，则相应的后面的元素均前移，导致少判断了一个元素。插入同理
    
   
   2.while
     while 条件判断:
        执行

     支持break,continue
	 
	 
五、变量作用域
1.分类
  python中，分为四个作用域
	L （Local） 局部作用域
	E （Enclosing） 闭包函数外的函数中
	G （Global） 全局作用域
	B （Built-in） 内建作用域
	
	以 L –> E –> G –>B 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内建中找。
	
   python中，在def、class和lambda中会改变变量的作用域
   但如if/elif/else/ try/except for/while中定义的，并非局部变量，在其外仍能访问
   
   改变作用域，就是说，在def、class和lambda中进行复制，则局部作用域就会覆盖全局作用域
   
 2.全局变量和局部变量
 
 
六、None
1.特性
	None是一个特殊的常量。

	None和False不同。

	None不是0。

	None不是空字符串。

	None和任何其他的数据类型比较永远返回False。

	None有自己的数据类型NoneType。

	你可以将None复制给任何变量，但是你不能创建其他NoneType对象。

eg:
	d = None
	if d == None:      #或if d is None
		print("NONE")	
	else :
		print("1")
		
	输出NONE
	 
 
   
   
   
   


    
